"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ng2_drag_drop_service_1 = require("../services/ng2-drag-drop.service");
var utils_1 = require("../shared/utils");
/**
 * Makes an element draggable by adding the draggable html attribute
 */
var Draggable = (function () {
    function Draggable(el, ng2DragDropService) {
        this.el = el;
        this.ng2DragDropService = ng2DragDropService;
        /**
         * Currently not used
         */
        this.dragEffect = 'move';
        /**
         * Defines compatible drag drop pairs. Values must match both in draggable and droppable.dropScope.
         */
        this.dragScope = 'default';
        /**
         * Defines if drag is enabled. `true` by default.
         */
        this.dragEnabled = true;
        /**
         * Event fired when Drag is started
         */
        this.onDragStart = new core_1.EventEmitter();
        /**
         * Event fired while the element is being dragged
         */
        this.onDrag = new core_1.EventEmitter();
        /**
         * Event fired when drag ends
         */
        this.onDragEnd = new core_1.EventEmitter();
    }
    Draggable.prototype.dragStart = function (e) {
        if (this.allowDrag()) {
            utils_1.Utils.addClass(this.el, this.dragOverClass);
            this.ng2DragDropService.dragData = this.dragData;
            this.ng2DragDropService.scope = this.dragScope;
            // Firefox requires setData() to be called otherwise the drag does not work.
            // We don't use setData() to transfer data anymore so this is just a dummy call.
            if (e.dataTransfer != null)
                e.dataTransfer.setData('text', '');
            // Set dragImage
            if (this.dragImage) {
                var img = document.createElement("img");
                img.src = this.dragImage;
                e.dataTransfer.setDragImage(img, 0, 0);
            }
            e.stopPropagation();
            this.onDragStart.emit(e);
            this.ng2DragDropService.onDragStart.next();
        }
        else {
            e.preventDefault();
        }
    };
    Draggable.prototype.drag = function (e) {
        this.onDrag.emit(e);
    };
    Draggable.prototype.dragEnd = function (e) {
        utils_1.Utils.removeClass(this.el, this.dragOverClass);
        this.ng2DragDropService.onDragEnd.next();
        this.onDragEnd.emit(e);
        e.stopPropagation();
        e.preventDefault();
    };
    Draggable.prototype.mouseover = function (e) {
        this.mouseOverElement = e.target;
    };
    Draggable.prototype.allowDrag = function () {
        if (this.dragHandle)
            return utils_1.Utils.matches(this.mouseOverElement, this.dragHandle) && this.dragEnabled;
        else
            return this.dragEnabled;
    };
    return Draggable;
}());
Draggable.decorators = [
    { type: core_1.Directive, args: [{
                selector: '[draggable]',
                host: {
                    '[draggable]': 'true'
                }
            },] },
];
/** @nocollapse */
Draggable.ctorParameters = function () { return [
    { type: core_1.ElementRef, },
    { type: ng2_drag_drop_service_1.Ng2DragDropService, },
]; };
Draggable.propDecorators = {
    'dragData': [{ type: core_1.Input },],
    'dragHandle': [{ type: core_1.Input },],
    'dragEffect': [{ type: core_1.Input },],
    'dragScope': [{ type: core_1.Input },],
    'dragOverClass': [{ type: core_1.Input },],
    'dragImage': [{ type: core_1.Input },],
    'dragEnabled': [{ type: core_1.Input },],
    'onDragStart': [{ type: core_1.Output },],
    'onDrag': [{ type: core_1.Output },],
    'onDragEnd': [{ type: core_1.Output },],
    'dragStart': [{ type: core_1.HostListener, args: ['dragstart', ['$event'],] },],
    'drag': [{ type: core_1.HostListener, args: ['drag', ['$event'],] },],
    'dragEnd': [{ type: core_1.HostListener, args: ['dragend', ['$event'],] },],
    'mouseover': [{ type: core_1.HostListener, args: ['mouseover', ['$event'],] },],
};
exports.Draggable = Draggable;
//# sourceMappingURL=draggable.js.map